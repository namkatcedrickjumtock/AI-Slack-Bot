import { RTMClient } from "@slack/rtm-api";
import { WebClient } from "@slack/web-api";



const web = new WebClient("xoxb-3164401680611-3591228652978-edQMvXp9rlHuZbd5FYOEFAQR")
// const token = process.env.SLACK_BOT_TOKEN;
const rtm = new RTMClient("xoxb-3164401680611-3591228652978-edQMvXp9rlHuZbd5FYOEFAQR")





// sending msges
async function sendMessage(channele, msg) {
    await web.chat.postMessage({
        channel: channele,
        text: msg
    })
}


rtm.start()
    .catch(console.error)

let date = new Date()
let isTime = 9
// = date.getHours()
let ispitchFriday = date.getDay()
let minutes = date.getMinutes()
let isHackthon = date.getHours();
let month = date.getMonth


rtm.on('member_joined_channel', async (event) => {
    try {
        // Send a welcome message to the same channel where the new member just joined, and mention the user.
        const reply = await rtm.sendMessage(`Welcome to the channel, <@${event.user}>`, event.channel)
        console.log('Message sent successfully', reply.ts);
    } catch (error) {
        console.log('An error occurred', error);
    }
})


rtm.on('ready', async () => {
    // isTime == 9 ? scheduleMessage("Hello Guys good morning Time for Stand Up", isTime) : console.log('not yet time for Stand Up');
    ispitchFriday == 5 && isTime == 10 ? sendMessage("#team-echo-reminder-bot", "Hello Guys is Pitch Friday") : console.log('not yet day for Picth Friday');
    isHackthon == 6 && isTime == 11 ? sendMessage("#team-echo-reminder-bot", "Hackthon in 30mns guys") : console.log('not yet time for hackathon');
    console.log(`Today is ${date.getDay()}`);

    // optional testlog
    sendMessage("#team-echo-reminder-bot", "Slack bot reaching server succesfully")
});




// // scheduling msg 
async function scheduleMessage(msg, time) {
    try {
        // Call the chat.scheduleMessage method using the WebClient
        const result = await web.chat.scheduleMessage({
            channel: CLIENT_ID,
            text: msg,
            // Time to post message, in Unix Epoch timestamp format
            post_at: time
        });
        console.log(result);
    }
    catch (error) {
        console.error(error);
    }
}
